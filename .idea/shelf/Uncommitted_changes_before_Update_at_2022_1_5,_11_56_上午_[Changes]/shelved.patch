Index: docs/bitxhub/function/relay_manager.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># 中继模式管理\n\n中继链支持对应用链的管理，包括注册、更新、冻结、注销应用链等功能。\n\n## 1. 应用链注册\n### pier appchain register \n对于需要加入跨链网络使用中继链进行跨链的应用链，需要首先由应用链管理员向中继链注册应用链，参数说明如下：\n\n```shell\nNAME:\n   Pier appchain register - Register appchain in bitxhub\n\nUSAGE:\n   Pier appchain register [command options] [arguments...]\n\nOPTIONS:\n   --name value           Specify appchain name\n   --type value           Specify appchain type\n   --desc value           Specify appchain description\n   --version value        Specify appchain version\n   --validators value     Specify appchain validators path\n   --consensusType value  Specify appchain consensus type\n   --addr value           Specify bitxhub node address\n```\n**参数解释：**\n\n* `--repo`：可选参数，指定pier配置文件所在目录，如果不指定，默认使用$HOME/.pier目录。\n* `--name`：必选参数，指定应用链名称。\n* `--type`：必选参数，指定应用链类型，如hyperchain、fabric等。\n* `--desc`：必选参数，对应用链的描述信息。\n* `--version`：必选参数，指定应用链版本信息。\n* `--validators`：必选参数，指定应用链的验证人信息所在的文件路径。\n* `--consensusType`：必选参数，指定p应用链的共识类型，如rbft、raft等。\n* `--addr`：可选参数，指定要连接的中继链节点地址，如果不指定，默认使用$repo目录下pier.toml中指定的BitXHub节点地址。\n\n该命令向中继链发送一笔应用链注册的交易，中继链以交易的from（即当前pier公钥的地址）作为应用链的ID，生成一个应用链注册的提案。\n\n中继链管理员需要对提案进行投票，命令如下：\n```shell\nbitxhub [--repo <repository>] client governance vote --id <proposal id> --info <voting information>  --reason <reason to vote>\n```\n**参数解释：**\n\n* `--repo`：可选参数，指定bitxhub节点配置文件所在目录，如果不指定，默认使用$HOME/.bitxhub目录。\n* `--id`：必选参数，指定提案id。\n* `--info`：必选参数，指定投票信息，approve或者reject。\n* `--reason`：必选参数，指定投票的原因。\n\n### 示例说明\n比如进行fabric应用链的注册：\n```shell\n# 参数说明\n$ pier [--repo <repository>] appchain register --name <appchain name> --type <appchain type> --desc <description> --version <appchain version> --validators <path of appchain validators file> --consensusType <appchain consensus type> [--addr <bitxhub node address>]\n\n# 具体样例\n$ pier appchain register --name chainA --type fabric --desc chainA-desc --version 1.4.3 --validators config/fabric.validators --consensusType raft \nINFO[11:01:25.884] Establish connection with bitxhub localhost:60011 successfully  module=rpcx\nthe register request was submitted successfully, chain id is 0x8D093dd84717042b23546cdA396cEBB2F48D8442, proposal id is 0x8D093dd84717042b23546cdA396cEBB2F48D8442-0\n```\n如上例所示，应用链管理员提交应用链注册请求，应用链ID为0x8D093dd84717042b23546cdA396cEBB2F48D8442，提案号为0x8D093dd84717042b23546cdA396cEBB2F48D8442-0。中继链管理员需要对该提案进行审核并进行投票，命令如下：\n\n如管理员对该提案审核后，认为该应用链提交对信息无误，投票通过，命令执行如下：\n```shell\n$ bitxhub --repo ./scripts/build/node1 client governance vote --id 0x8D093dd84717042b23546cdA396cEBB2F48D8442-0 --info approve --reason \"fabric appchain register\"\nvote successfully!\n$ bitxhub --repo ./scripts/build/node2 client governance vote --id 0x8D093dd84717042b23546cdA396cEBB2F48D8442-0 --info approve --reason \"fabric appchain register\"\nvote successfully!\n$ bitxhub --repo ./scripts/build/node3 client governance vote --id 0x8D093dd84717042b23546cdA396cEBB2F48D8442-0 --info approve --reason \"fabric appchain register\"\nvote successfully!\n$ bitxhub --repo ./scripts/build/node1 client governance proposals --id 0x8D093dd84717042b23546cdA396cEBB2F48D8442-0 \nId                                            Type         Status   ApproveNum  RejectNum  ElectorateNum  ThresholdNum  Des\n--                                            ----         ------   ----------  ---------  -------------  ------------  ---\n0x8D093dd84717042b23546cdA396cEBB2F48D8442-0  AppchainMgr  approve  3           0          4              3             register\n```\n可以看到该提案已经投票通过，应用链注册成功。\n\n## 2. 更新应用链\n### pier appchain update\n如果应用链发生了更改，比如验证人信息发生了变化，需要更新其在中继链上的应用链信息。参数说明如下：\n```shell\nNAME:\n   Pier appchain update - update appchain in bitxhub\n\nUSAGE:\n   Pier appchain update [command options] [arguments...]\n\nOPTIONS:\n   --name value           Specify appchain name\n   --type value           Specify appchain type\n   --desc value           Specify appchain description\n   --version value        Specify appchain version\n   --validators value     Specify appchain validators path\n   --consensusType value  Specify appchain consensus type\n   --addr value           Specify bitxhub node address\n```\n\n该命令参数含义与应用链注册命令的参数一致，不再赘述。\n\n### 示例说明\n比如进行fabric应用链的验证人信息发生变化，需要更新应用链，命令执行如下：\n```shell\n# 参数说明\n$ pier --repo <repository> appchain update --name <appchain name> --type <appchain type> --desc <description> --version <appchain version> --validators <path of appchain validators file> --consensusType <appchain consensus type> --addr <bitxhub node address>\n\n# 具体样例\n$ pier appchain update --name chainA --type fabric --desc chainA-desc --version 1.4.3 --validators config/fabric-new.validators --consensusType raft \nINFO[11:01:25.884] Establish connection with bitxhub localhost:60011 successfully  module=rpcx\nthe update request was submitted successfully, proposal id is 0x8D093dd84717042b23546cdA396cEBB2F48D8442-1\n```\n\n管理员进行审核并投票，与注册应用链部分一致，不再赘述。\n\n## 3. 冻结应用链\n### pier appchain freeze\n如果应用链出现问题，应用链管理员可以申请冻结应用链。命令如下：\n```shell\npier --repo <repository> appchain freeze\n```\n\n### 示例说明\n比如对之前已经注册过的应用链进行冻结，命令执行如下：\n```shell\n$ pier appchain freeze\nINFO[11:01:25.884] Establish connection with bitxhub localhost:60011 successfully  module=rpcx\nthe freeze request was submitted successfully, proposal id is 0x8D093dd84717042b23546cdA396cEBB2F48D8442-2\n```\n\n管理员进行审核并投票，与注册应用链部分一致，不再赘述。\n\n\n## 4. 激活应用链\n### pier appchain activate\n如果冻结的应用链恢复正常，应用链管理员可以申请激活应用链。命令如下：\n```shell\npier --repo <repository> appchain activate\n```\n\n### 示例说明\n比如对之前已经冻结的应用链进行激活，命令执行如下：\n```shell\n$ pier appchain freeze\nINFO[11:01:25.884] Establish connection with bitxhub localhost:60011 successfully  module=rpcx\nthe activate request was submitted successfully, proposal id is 0x8D093dd84717042b23546cdA396cEBB2F48D8442-3\n```\n\n管理员进行审核并投票，与注册应用链部分一致，不再赘述。\n\n## 5. 注销应用链\n### pier appchain logout\n如果应用链退出跨链系统，不再进行跨链，应用链管理员可以向中继链提交注销应用链的提案。命令如下：\n```shell\npier --repo <repository> appchain logout\n```\n\n### 示例说明\n比如对之前激活的应用链进行注销，命令执行如下：\n```shell\n$ pier appchain logout \nINFO[11:01:25.884] Establish connection with bitxhub localhost:60011 successfully  module=rpcx\nthe logout request was submitted successfully, proposal id is 0x8D093dd84717042b23546cdA396cEBB2F48D8442-4\n```\n\n管理员进行审核并投票，与注册应用链部分一致，不再赘述。
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/bitxhub/function/relay_manager.md b/docs/bitxhub/function/relay_manager.md
--- a/docs/bitxhub/function/relay_manager.md	(revision 6a3d4608a19ce1cc5f97f32711c0c9435c0e71a0)
+++ b/docs/bitxhub/function/relay_manager.md	(date 1641351950436)
@@ -3,34 +3,46 @@
 中继链支持对应用链的管理，包括注册、更新、冻结、注销应用链等功能。
 
 ## 1. 应用链注册
-### pier appchain register 
+### pier appchain method register 
 对于需要加入跨链网络使用中继链进行跨链的应用链，需要首先由应用链管理员向中继链注册应用链，参数说明如下：
 
 ```shell
 NAME:
-   Pier appchain register - Register appchain in bitxhub
+   Pier appchain method register - Register appchain did method and info to bitxhub
 
 USAGE:
-   Pier appchain register [command options] [arguments...]
+   Pier appchain method register [command options] [arguments...]
 
 OPTIONS:
-   --name value           Specify appchain name
-   --type value           Specify appchain type
-   --desc value           Specify appchain description
-   --version value        Specify appchain version
-   --validators value     Specify appchain validators path
-   --consensusType value  Specify appchain consensus type
-   --addr value           Specify bitxhub node address
+   --admin-key value   Specific admin key path
+   --method value      Specific did sub method name(like appchain)
+   --doc-addr value    Specify the addr of did document
+   --doc-hash value    Specify the hash of did document
+   --name value        Specific appchain name
+   --type value        Specific appchain type
+   --desc value        Specific appchain description
+   --version value     Specific appchain version
+   --validators value  Specific appchain validators path
+   --consensus value   Specific appchain consensus type
+   --rule value        Specific appchain rule
+   --rule-url value    Specific appchain rule url
+   --reason value      Specify governance reason
 ```
 **参数解释：**
 
 * `--repo`：可选参数，指定pier配置文件所在目录，如果不指定，默认使用$HOME/.pier目录。
-* `--name`：必选参数，指定应用链名称。
-* `--type`：必选参数，指定应用链类型，如hyperchain、fabric等。
+* `--admin-key`：必选参数，管理员私钥地址，一般为admin.json。
+* `--method`：必选参数，did方法名。
+* `--doc-addr`：必选参数，指定did文件地址。
+* `--doc-hash`：必选参数，指定did文件的哈希值。
+* `--name`：必选参数，指定的应用了名称。
+* `--type`：指定的应用链类型。如fabric、flato。
 * `--desc`：必选参数，对应用链的描述信息。
 * `--version`：必选参数，指定应用链版本信息。
 * `--validators`：必选参数，指定应用链的验证人信息所在的文件路径。
-* `--consensusType`：必选参数，指定p应用链的共识类型，如rbft、raft等。
+* `--consensus`：必选参数，指定p应用链的共识类型，如rbft、raft等。
+* `--rule`：必选参数，指定验证规则地址。
+* `--rule_url`：指定验证规则url。
 * `--addr`：可选参数，指定要连接的中继链节点地址，如果不指定，默认使用$repo目录下pier.toml中指定的BitXHub节点地址。
 
 该命令向中继链发送一笔应用链注册的交易，中继链以交易的from（即当前pier公钥的地址）作为应用链的ID，生成一个应用链注册的提案。
@@ -47,30 +59,56 @@
 * `--reason`：必选参数，指定投票的原因。
 
 ### 示例说明
-比如进行fabric应用链的注册：
+比如进行fabric应用链的注册,现在 --doc-addr 和 --doc-hash 、--rule-url没有真正用到，使用下面示例的即可，验证规则需要提前注册（也可使用示例中内置验证规则地址）。验证者信息需要提前拷贝到repo目录下。注意在注册应用链时，确保已经正常启动中继链：
 ```shell
-# 参数说明
-$ pier [--repo <repository>] appchain register --name <appchain name> --type <appchain type> --desc <description> --version <appchain version> --validators <path of appchain validators file> --consensusType <appchain consensus type> [--addr <bitxhub node address>]
-
 # 具体样例
-$ pier appchain register --name chainA --type fabric --desc chainA-desc --version 1.4.3 --validators config/fabric.validators --consensusType raft 
-INFO[11:01:25.884] Establish connection with bitxhub localhost:60011 successfully  module=rpcx
-the register request was submitted successfully, chain id is 0x8D093dd84717042b23546cdA396cEBB2F48D8442, proposal id is 0x8D093dd84717042b23546cdA396cEBB2F48D8442-0
+
+$ cd <bitxhub_project> && make install
+
+# 启动bitxhub
+$ make cluster
+
+# bitxhub管理员向pier管理员转账。注意更改为bitxhub项目地址
+$ bitxhub client tx send --key ~/goproject/meshplus/bitxhub/scripts/build/node1/key.json --to 0xf2201f28368706EF75e3199b4f4DE2a24bA85CAe --amount 100000000000000000000000000
+
+$ pier --repo $(pwd) init relay
+# 可以使用对应插件项目下的验证者信息，注意更改项目路径
+$ cp ~/goproject/meshplus/pier-client-fabric/config/fabric.validators ./fabric/
+
+$ bitxhub client tx send --key ~/code/bitxhub/scripts/build/node1/key.json --to 0xf2201f28368706EF75e3199b4f4DE2a24bA85CAe --amount 100000000000000000000000000
+
+$ pier --repo $(pwd) appchain method register --admin-key ./key.json --method fabricappchain --doc-addr ./ipfs/QmQVxzUqN2Yv2UHUQXYwH8dSNkM8ReJ9qPqwJsf8zzoNUi --doc-hash QmQVxzUqN2Yv2UHUQXYwH8dSNkM8ReJ9qPqwJsf8zzoNUi --name fabricTest --type fabric --desc="test for fabric" --version v1.0.3 --validators ./fabric/fabric.validators --consensus raft --rule 0x00000000000000000000000000000000000000a2 --rule-url http://localHost
+
+Register appchain method info for did:bitxhub:fabricappchain:. successfully, wait for proposal 0xCc9b389cEA6b1E2845a895829126B0a15a1cdA6F-0 to finish.
 ```
-如上例所示，应用链管理员提交应用链注册请求，应用链ID为0x8D093dd84717042b23546cdA396cEBB2F48D8442，提案号为0x8D093dd84717042b23546cdA396cEBB2F48D8442-0。中继链管理员需要对该提案进行审核并进行投票，命令如下：
+如上例所示，应用链管理员提交应用链注册请求，应用链DID为did:bitxhub:fabricappchain:.，提案号为0xCc9b389cEA6b1E2845a895829126B0a15a1cdA6F-0。中继链管理员需要对该提案进行审核并进行投票，命令如下：
 
 如管理员对该提案审核后，认为该应用链提交对信息无误，投票通过，命令执行如下：
 ```shell
-$ bitxhub --repo ./scripts/build/node1 client governance vote --id 0x8D093dd84717042b23546cdA396cEBB2F48D8442-0 --info approve --reason "fabric appchain register"
+$ PROPOSAL_ID=上面得到的ID
+
+# 注意切换到bitxhub项目目录下
+$ bitxhub --repo ./scripts/build/node1 client governance vote --id $PROPOSAL_ID --info approve --reason "fabric appchain register"
 vote successfully!
-$ bitxhub --repo ./scripts/build/node2 client governance vote --id 0x8D093dd84717042b23546cdA396cEBB2F48D8442-0 --info approve --reason "fabric appchain register"
+
+$ bitxhub --repo ./scripts/build/node2 client governance vote --id $PROPOSAL_ID --info approve --reason "fabric
+appchain register"
 vote successfully!
-$ bitxhub --repo ./scripts/build/node3 client governance vote --id 0x8D093dd84717042b23546cdA396cEBB2F48D8442-0 --info approve --reason "fabric appchain register"
+
+$ bitxhub --repo ./scripts/build/node3 client governance vote --id $PROPOSAL_ID --info approve --reason "fabric appchain register"
 vote successfully!
-$ bitxhub --repo ./scripts/build/node1 client governance proposals --id 0x8D093dd84717042b23546cdA396cEBB2F48D8442-0 
-Id                                            Type         Status   ApproveNum  RejectNum  ElectorateNum  ThresholdNum  Des
---                                            ----         ------   ----------  ---------  -------------  ------------  ---
-0x8D093dd84717042b23546cdA396cEBB2F48D8442-0  AppchainMgr  approve  3           0          4              3             register
+
+$ bitxhub --repo ./scripts/build/node1 client governance proposal query --id $PROPOSAL_ID
+
+========================================================================================
+Id                                            ManagedObjectId               Type         EventType  Status   A/R  IE/AE/TE  Special/Super  CreateTime           Description  EndReason
+--                                            ---------------               ----         ---------  ------   ---  --------  -------------  ----------           -----------  ---------
+0xCc9b389cEA6b1E2845a895829126B0a15a1cdA6F-0  did:bitxhub:fabricappchain:.  AppchainMgr  register   approve  3/0  4/4/3     false/true     1641348118114187000               end of normal voting
+========================================================================================
+* A/R：approve num / reject num
+* IE/AE/TE：the total number of electorate at the time of the initial proposal / the number of available electorate currently /the minimum threshold for votes to take effect
+* Special/Super：is special proposal / is super admin voted
+
 ```
 可以看到该提案已经投票通过，应用链注册成功。
 
@@ -85,62 +123,62 @@
    Pier appchain update [command options] [arguments...]
 
 OPTIONS:
-   --name value           Specify appchain name
-   --type value           Specify appchain type
-   --desc value           Specify appchain description
-   --version value        Specify appchain version
-   --validators value     Specify appchain validators path
-   --consensusType value  Specify appchain consensus type
-   --addr value           Specify bitxhub node address
+   --admin-key value       Specific admin key path
+   --id value              Specify appchain id(did)
+   --doc-addr value        Specify appchain did doc addr
+   --doc-hash value        Specify appchain did doc hash
+   --name value            Specify appchain name
+   --type value            Specify appchain type
+   --desc value            Specify appchain description
+   --version value         Specify appchain version
+   --validators value      Specify appchain validators path
+   --consensus-type value  Specify appchain consensus type
+   --reason value          Specify governance reason
 ```
 
-该命令参数含义与应用链注册命令的参数一致，不再赘述。
+**参数解释：**
+
+* `--repo`：可选参数，指定pier配置文件所在目录，如果不指定，默认使用$HOME/.pier目录。
+* `--admin-key`：必选参数，管理员私钥地址，一般为admin.json。
+* `--id`：必选参数，应用链的did。
+* `--doc-addr`：必选参数，指定did文件地址。
+* `--doc-hash`：必选参数，指定did文件的哈希值。
+* `--name`：必选参数，指定的应用了名称。
+* `--type`：指定的应用链类型。如fabric、flato。
+* `--desc`：必选参数，对应用链的描述信息。
+* `--version`：必选参数，指定应用链版本信息。
+* `--validators`：必选参数，指定应用链的验证人信息所在的文件路径。
+* `--consensus-type`：必选参数，指定p应用链的共识类型，如rbft、raft等。
+* `--reason`：可选参数，描述信息。
+* `--addr`：可选参数，指定要连接的中继链节点地址，如果不指定，默认使用$repo目录下pier.toml中指定的BitXHub节点地址。
 
 ### 示例说明
 比如进行fabric应用链的验证人信息发生变化，需要更新应用链，命令执行如下：
 ```shell
-# 参数说明
-$ pier --repo <repository> appchain update --name <appchain name> --type <appchain type> --desc <description> --version <appchain version> --validators <path of appchain validators file> --consensusType <appchain consensus type> --addr <bitxhub node address>
-
 # 具体样例
-$ pier appchain update --name chainA --type fabric --desc chainA-desc --version 1.4.3 --validators config/fabric-new.validators --consensusType raft 
-INFO[11:01:25.884] Establish connection with bitxhub localhost:60011 successfully  module=rpcx
-the update request was submitted successfully, proposal id is 0x8D093dd84717042b23546cdA396cEBB2F48D8442-1
-```
-
-管理员进行审核并投票，与注册应用链部分一致，不再赘述。
+$ pier --repo $(pwd) appchain update --admin-key ./key.json --id did:bitxhub:fabricappchain:. --doc-addr ./ipfs/QmQVxzUqN2Yv2UHUQXYwH8dSNkM8ReJ9qPqwJsf8zzoNUi --doc-hash QmQVxzUqN2Yv2UHUQXYwH8dSNkM8ReJ9qPqwJsf8zzoNUi --name fabricTest --type fabric --desc="test for fabric" --version v1.1.0 --validators./fabric/fabric.validators --consensus-type raft
 
-## 3. 冻结应用链
-### pier appchain freeze
-如果应用链出现问题，应用链管理员可以申请冻结应用链。命令如下：
-```shell
-pier --repo <repository> appchain freeze
-```
-
-### 示例说明
-比如对之前已经注册过的应用链进行冻结，命令执行如下：
-```shell
-$ pier appchain freeze
-INFO[11:01:25.884] Establish connection with bitxhub localhost:60011 successfully  module=rpcx
-the freeze request was submitted successfully, proposal id is 0x8D093dd84717042b23546cdA396cEBB2F48D8442-2
+the update request was submitted successfully，, proposal id is 0xCc9b389cEA6b1E2845a895829126B0a15a1cdA6F-1
 ```
 
 管理员进行审核并投票，与注册应用链部分一致，不再赘述。
 
 
-## 4. 激活应用链
+
+
+## 3. 激活应用链
 ### pier appchain activate
 如果冻结的应用链恢复正常，应用链管理员可以申请激活应用链。命令如下：
 ```shell
-pier --repo <repository> appchain activate
+$ pier --repo <repository> appchain activate --admin-key <admin_key_json> --id <appchian_did>
 ```
 
 ### 示例说明
 比如对之前已经冻结的应用链进行激活，命令执行如下：
 ```shell
-$ pier appchain freeze
+$ pier --repo $(pwd) appchain activate --admin-key ./key.json --id did:bitxhub:fabricappchain:.
 INFO[11:01:25.884] Establish connection with bitxhub localhost:60011 successfully  module=rpcx
-the activate request was submitted successfully, proposal id is 0x8D093dd84717042b23546cdA396cEBB2F48D8442-3
+the activate request was submitted successfully, proposal id is 0xCc9b389cEA6b1E2845a895829126B0a15a1cdA6F-2
 ```
 
 管理员进行审核并投票，与注册应用链部分一致，不再赘述。
@@ -149,15 +187,34 @@
 ### pier appchain logout
 如果应用链退出跨链系统，不再进行跨链，应用链管理员可以向中继链提交注销应用链的提案。命令如下：
 ```shell
-pier --repo <repository> appchain logout
+pier --repo <repository> appchain logout --admin-key <admin_key_json> --id <appchian_did>
 ```
 
 ### 示例说明
 比如对之前激活的应用链进行注销，命令执行如下：
 ```shell
-$ pier appchain logout 
-INFO[11:01:25.884] Establish connection with bitxhub localhost:60011 successfully  module=rpcx
-the logout request was submitted successfully, proposal id is 0x8D093dd84717042b23546cdA396cEBB2F48D8442-4
+$ pier appchain logout --admin-key ./key.json --id did:bitxhub:fabricappchain:.
+the logout request was submitted successfully, proposal id is 0xCc9b389cEA6b1E2845a895829126B0a15a1cdA6F-3
+```
+
+管理员进行审核并投票，与注册应用链部分一致，不再赘述。
+
+### Pier appchain get 
+
+获取应用链注册后的相关信息。命令如下：
+
+```shell
+pier --repo <repository> appchain get --admin-key <admin_key_json> --id <appchian_did>
+```
+
+### 示例说明
+
+获取当前应用链相关信息，命令执行如下：
+
+```shell
+# 具体样例
+$ pier --repo $(pwd) appchain get --admin-key ./key.json --id did:bitxhub:fabricappchain:.
+
+{"id":"did:bitxhub:fabricappchain:.","name":"fabricTest1","validators":"-----BEGIN CERTIFICATE-----\nMIICKTCCAc+gAwIBAgIRAIBO31aZaSZoEYSy2AJuhJcwCgYIKoZIzj0EAwIwczEL\nMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNhbiBG\ncmFuY2lzY28xGTAXBgNVBAoTEG9yZzIuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\nLm9yZzIuZXhhbXBsZS5jb20wHhcNMjAwMjA1MDgyMjAwWhcNMzAwMjAyMDgyMjAw\nWjBqMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMN\nU2FuIEZyYW5jaXNjbzENMAsGA1UECxMEcGVlcjEfMB0GA1UEAxMWcGVlcjEub3Jn\nMi5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABG3jszFPTbGm\ndAYg2BxmHMTDKfQReNw3p9ttMK130qF5lQo5zLBG8Sa3viOCLnvjjg6A/P+yKnwv\nisI/jEVE8T2jTTBLMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMCsGA1Ud\nIwQkMCKAIMVL+daK7nMGr2/AQIXTSPFkdd3UiPVDkWtkh5ujnalEMAoGCCqGSM49\nBAMCA0gAMEUCIQDMYOQiYeMiQZTxlRkj/3/jjYvwwdCcX5AWuFmraiHkugIgFkX/\n6uiTSD0lz8P+wwlLf24cIABq2aZyi8q4gj0YfwA=\n-----END CERTIFICATE-----\n","consensus_type":"raft","status":"updating","chain_type":"fabric","desc":"test for fabric","version":"v1.1.0","public_key":"0x42444f30475a697746533934706e344169712b77365442417757663635787637724f616b4e786d536344465766394970546f694f7239712b6f6259386c514546617a434b316c714e32533446306b426e633542313034413d","owner_did":"","did_doc_addr":"./ipfs/QmQVxzUqN2Yv2UHUQXYwH8dSNkM8ReJ9qPqwJsf8zzoNUi","did_doc_hash":"QmQVxzUqN2Yv2UHUQXYwH8dSNkM8ReJ9qPqwJsf8zzo111","fsm":{}}
 ```
 
-管理员进行审核并投票，与注册应用链部分一致，不再赘述。
\ No newline at end of file
Index: mkdocs.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>site_name: Bitxhub Document\nrepo_url: https://github.com/meshplus/bitxhub\nrepo_name: meshplus/bitxhub\nextra_css:\n  - stylesheets/extra.css\ntheme:\n  logo: assets/logo.png\n  name: material\n  features:\n    - navigation.tabs\n    - navigation.top\n    - search.highlight\n  font:\n    # text: Roboto\n    code: Roboto Mono\n  palette:\n    # - media: \"(prefers-color-scheme: dark)\"\n    #   scheme: slate\n    #   primary: black\n    #   accent: blue\n    #   toggle:\n    #     icon: material/weather-sunny\n    #     name: Switch to night mode\n    # - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      primary: black\n      accent: blue\n      toggle:\n        icon: material/weather-night\n        name: Switch to light mode\nedit_uri: edit/master/docs/docs\n\nextra:\n  version:\n    provider: mike\n\nmarkdown_extensions:\n  - pymdownx.highlight:\n      linenums: false\n      use_pygments: true\n  - abbr\n  - attr_list\n  - def_list\n  - footnotes\n  - meta\n  - md_in_html\n  - pymdownx.arithmatex:\n      generic: true\n  - pymdownx.betterem:\n      smart_enable: all\n  - pymdownx.caret\n  - pymdownx.critic\n  - pymdownx.details\n  - pymdownx.emoji:\n      emoji_index: !!python/name:materialx.emoji.twemoji\n      emoji_generator: !!python/name:materialx.emoji.to_svg\n  - pymdownx.highlight\n  - pymdownx.inlinehilite\n  - pymdownx.keys\n  - pymdownx.magiclink:\n      repo_url_shorthand: true\n      user: squidfunk\n      repo: mkdocs-material\n  - pymdownx.mark\n  - pymdownx.smartsymbols\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid-experimental\n          format: !!python/name:pymdownx.superfences.fence_code_format\n  - pymdownx.tabbed\n  - pymdownx.tasklist:\n      custom_checkbox: true\n  - pymdownx.tilde\n\n#extra_javascript:\n#  - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.1/highlight.min.js\n#  - javascripts/config.js\n#extra_css:\n#  - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.1/styles/default.min.css\n\nnav:\n  - Home:\n      - 产品介绍:\n          - 平台介绍: bitxhub/introduction/summary.md\n          - 基本概念: bitxhub/introduction/conception.md\n          - 产品优势: bitxhub/introduction/advantage.md\n          - 应用场景: bitxhub/introduction/scenaries.md\n      - 整体架构:\n          - 产品架构: bitxhub/architecture/flexible_arch.md\n          - 技术架构: bitxhub/architecture/arch.md\n          - 交易流: bitxhub/architecture/tx_flow.md\n      - 快速开始: bitxhub/quick_start.md\n      - 部署使用:\n          - 环境准备: bitxhub/usage/env.md\n          - 整体说明: bitxhub/usage/overall_description.md\n          - 单中继架构部署:\n            - 中继链部署: bitxhub/usage/single_bitxhub/deploy_bitxhub.md\n            - 跨链网关部署: bitxhub/usage/single_bitxhub/deploy_pier.md\n          - 跨链网关直连模式部署: bitxhub/usage/direct_mode_pier/pier_direct_mode_deploy.md\n          - 系统验证与交易流程体验: bitxhub/usage/status_verification.md\n      - 产品功能:\n        - 应用链管理:\n          - 中继模式管理: bitxhub/function/relay_manager.md\n          - 直连模式管理: bitxhub/function/direct_manager.md\n        - 证书管理: bitxhub/function/cert_manage.md\n        - 跨链合约调用: bitxhub/function/cross_invoke.md\n      - 开发手册:\n          - 命令行说明:\n            - 中继链BitXHub: bitxhub/dev/cmd/bitxhub_cmd.md\n            - 跨链网关Pier: bitxhub/dev/cmd/pier.md\n          - 跨链合约开发: bitxhub/dev/cross_contract.md\n          - 应用链插件编写: bitxhub/dev/plugin.md\n          - 验证规则编写: bitxhub/dev/rule.md\n          - 验证者信息生成: bitxhub/dev/validator.md\n      - 设计文档:\n          - 共识算法插件方案: bitxhub/design/consensus_plugin.md\n          - 跨链事务方案: bitxhub/design/interchain_transaction.md\n          - 跨链网关设计方案: bitxhub/design/pier_cmd.md\n          - 隐私保护方案: bitxhub/design/privacy_protection.md\n          - API流控设计: bitxhub/design/rate-limiter.md\n      - 运维:\n        - 查看日志: bitxhub/operation/node_log_view.md\n        - 节点状态检测: bitxhub/operation/node_status_check.md\n        - 异常问题处理: bitxhub/operation/exception_problem_handling.md\n      - 版本发布记录:\n          - BitXHub v1.6.0: bitxhub/changelog/bitxhub_v1.6.0.md\n          - BitXHub v1.5.0: bitxhub/changelog/bitxhub_v1.5.0.md\n          - BitXHub v1.4.0: bitxhub/changelog/bitxhub_v1.4.0.md\n          - BitXHub v1.3.0: bitxhub/changelog/bitxhub_v1.3.0.md\n      - 社区介绍: bitxhub/community_introduction.md\n      - 加入我们: bitxhub/join_us.md\n      - FAQ: bitxhub/faq.md\n  - Goduck:\n    - Getting started: goduck/index.md\n  - Premo:\n    - 使用文档: premo/usage.md\n  - SDK文档:\n      - GoSDK使用文档: sdk/gosdk.md\n      - JavaSDK使用: sdk/javasdk.md\n      - JsSDK使用文档: sdk/jssdk.md\n  - 跨链浏览器体验指南:\n      - 使用文档: scan/index.md\n      - 跨链网关接入: scan/deploy_pier_testnet.md\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mkdocs.yml b/mkdocs.yml
--- a/mkdocs.yml	(revision 6a3d4608a19ce1cc5f97f32711c0c9435c0e71a0)
+++ b/mkdocs.yml	(date 1641290546146)
@@ -108,7 +108,7 @@
       - 开发手册:
           - 命令行说明:
             - 中继链BitXHub: bitxhub/dev/cmd/bitxhub_cmd.md
-            - 跨链网关Pier: bitxhub/dev/cmd/pier.md
+            - 跨链网关Pier: bitxhub/dev/cmd/pier_cmd.md
           - 跨链合约开发: bitxhub/dev/cross_contract.md
           - 应用链插件编写: bitxhub/dev/plugin.md
           - 验证规则编写: bitxhub/dev/rule.md
@@ -116,7 +116,7 @@
       - 设计文档:
           - 共识算法插件方案: bitxhub/design/consensus_plugin.md
           - 跨链事务方案: bitxhub/design/interchain_transaction.md
-          - 跨链网关设计方案: bitxhub/design/pier_cmd.md
+          - 跨链网关设计方案: bitxhub/design/pier.md
           - 隐私保护方案: bitxhub/design/privacy_protection.md
           - API流控设计: bitxhub/design/rate-limiter.md
       - 运维:
Index: docs/bitxhub/dev/cmd/pier_cmd.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Pier命令行\n\n`pier`命令有多组子命令，其作用是与应用链或中继链交互，`pier`命令描述如下：\n\n```shell\nNAME:\n   Pier - Manipulate the crosschain node\n\nUSAGE:\n   pier [global options] command [command options] [arguments...]\n\nVERSION:\n   0.0.0\n\nCOMMANDS:\n   appchain    Command about appchain in bitxhub\n   client      Command about appchain in pier\n   id          Get appchain id\n   init        Initialize pier local configuration\n   interchain  Query interchain info\n   p2p         Command about p2p\n   rule        Command about rule\n   start       Start a long-running daemon process\n   version     Show version about ap\n   help, h     Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --repo value   Pier repository path\n   --tls          enable tls between pier and bitxhub or not\n   --help, -h     show help\n   --version, -v  print the version\n\n```\n\n**参数解释**\n\n- `--repo`：可选参数，指定pier节点配置文件所在目录，如果不指定，默认使用$HOME/.bitxhub目录。\n- `--tls`：可选参数，用于pier节点与bitxhub进行tls加密传输。如果不指定，默认为false。\n\n```shell\n GLOBAL OPTIONS:\n   --repo value   Pier repository path\n   --tls          enable tls between pier and bitxhub or not\n   --help, -h     show help\n   --version, -v  print the version\n```\n\n## 子命令描述\n\n### pier appchain\n\n`pier appchain`命令用于中继模式下，跨链网关Pier向中继链bitXHub实现应用链相关信息的注册、更新、变更等操作。\n\n**用法**\n\n```shell\nNAME:\n   Pier appchain - Command about appchain in bitxhub\n\nUSAGE:\n   Pier appchain command [command options] [arguments...]\n\nCOMMANDS:\n   register  Register appchain in bitxhub\n   update    update appchain in bitxhub\n   freeze    freeze appchain in bitxhub\n   activate  activate appchain in bitxhub\n   logout    logout appchain in bitxhub\n   get       Get appchain info\n\nOPTIONS:\n   --help, -h  show help\n\n```\n\n**具体描述**\n\n`pier appchain`具体描述与使用示例参考[中继模式管理](http://localhost:8000/bitxhub/function/relay_manager/)。\n\n\n\n### pier client\n\n`pier client`命令用于直连模式的应用链管理。\n\n**用法**\n\n```shell\nNAME:\n   Pier client - Command about appchain in pier\n\nUSAGE:\n   Pier client command [command options] [arguments...]\n\nCOMMANDS:\n   register  Register appchain in pier\n   update    Update appchain in pier\n   audit     Audit appchain in pier\n   get       Get appchain info\n   rule      register appchain validation rule\n\nOPTIONS:\n   --help, -h  show help\n\n```\n\n**具体描述**\n\n`pier appchain`具体描述与使用示例参考[直连模式管理](http://localhost:8000/bitxhub/function/direct_manager/)。\n\n### pier id\n\n`pier id`命令用于获取所绑定的应用链地址。\n\n**用法**\n\n```\nNAME:\n   pier id - Get appchain id\n\nUSAGE:\n   pier id [arguments...]\n```\n\n**具体描述**\n\n**样例：**\n\n```shell\n$ pier --repo $HOME/.pier1 id \n# 控制台输出\n0xfF8199Fae48C808b45667DA0CcaAEe839B1a10Cb\n```\n\n\n\n### pier init\n\n`pier init`命令用于初始化pier相关配置。如生成公私钥、ca证书等。\n\n**用法**\n\n```\nNAME:\n   pier init - Initialize pier local configuration\n\nUSAGE:\n   pier init [arguments...]\n```\n\n**具体描述**\n\n**样例：**\n\n```shell\n# 初始化pier1相关配置，配置文件目录为$HOME/.pier1\n$ pier --repo $HOME/.pier1 init\n├── api\t\t//直连模式下的api信息\n├── certs\n│   └── ca.pem\n├── key.json\n├── node.priv\n└── pier.toml\n```\n\n\n\n### pier interchain\n\n`pier interchain`命令用于查询应用链的跨链交易信息。\n\n用法\n\n```\nNAME:\n   Pier interchain - Query interchain info\n\nUSAGE:\n   Pier interchain command [command options] [arguments...]\n\nCOMMANDS:\n   ibtp  Query ibtp by id\n\nOPTIONS:\n   --key value  Specific key.json path\n   --help, -h   show help\n```\n\n**具体描述**\n\n**参数解释**\n\n- `--key`：必选参数指定pier的key.json文件。\n\n**子命令**\n\n```\nUSAGE:\n   Pier interchain command [command options] [arguments...]\n\nCOMMANDS:\n   ibtp  Query ibtp by id\n```\n\n**样例：**\n\n```shell\npier --repo $HOME/.pier1 interchain --key $HOME/.pier1/key.json ibtp --id 0xfF8199Fae48C808b45667DA0CcaAEe839B1a10Cb-0x23Fb0E7eF676467563d37D820F1b1Fddb0f9a2E1-1\n\n# 控制台输出\nINFO[16:52:41.917] Establish connection with bitxhub localhost:60013 successfully  module=rpcx\nTx hash: 0x82d3434e0a295B22A8e55884FEdd137d19e8cBDc32d5B593AD6D9AFB5cf59600\ntx:<from:<RawAddress:[255 129 153 250 228 140 128 139 69 102 125 160 204 170 238 131 155 26 16 203] Address:\"\" > to:<RawAddress:[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10] Address:\"\" > timestamp:1638435054429909000 transaction_hash:<RawHash:[130 211 67 78 10 41 91 34 168 229 88 132 254 221 19 125 25 232 203 220 50 213 181 147 173 109 154 251 92 245 150 0] Hash:\"\" > IBTP:<from:\"0xfF8199Fae48C808b45667DA0CcaAEe839B1a10Cb\" to:\"0x23Fb0E7eF676467563d37D820F1b1Fddb0f9a2E1\" index:1 timestamp:1638435054428680000 proof:\"k\\206\\262s\\3774\\374\\341\\235k\\200N\\377Z?WG\\255\\244\\352\\242/\\035I\\300\\036R\\335\\267\\207[K\" payload:\"\\022\\221\\001\\n*0x5bFe03Dbd09817d4957693f672cc31A133Bb6084\\022*0xA5dD12E27Ee5E79cE0B50adb376414351C8eea5f\\032\\020interchainCharge\\\"\\001A\\\"\\001B\\\"\\002102\\000:\\022interchainRollbackB\\001AB\\00210\" > nonce:4 signature:\"T)\\313\\333~\\316f\\372.\\010\\235\\234\\222J\\314@<\\202\\260\\243\\367b\\035\\016\\366\\326y\\3515\\020\\222\\256$\\010\\314\\035/\\271H\\217|~\\302\\233\\353b\\275\\267ir\\t\\242\\376\\224\\307q\\217l\\232\\037DP\\n\\317\\000\" extra:\"1\" > tx_meta:<block_hash:\"\\326{90^\\355a\\236\\342\\235i\\302\\374+\\352VI\\030\\242\\211\\335x\\371w\\221>(\\254%o\\212\\222\" block_height:14 >\n```\n\n\n\n### pier p2p\n\n`pier p2p`命令用于直连模式下pier网络通信的pid。\n\n**用法**\n\n```\nNAME:\n   Pier p2p - Command about p2p\n\nUSAGE:\n   Pier p2p command [command options] [arguments...]\n\nCOMMANDS:\n   id  get pier unique id in p2p network\n```\n\n**具体描述**\n\n**样例：**\n\n```shell\n# 初始化pier1相关配置，配置文件目录为$HOME/.pier1\n$ pier --repo $HOME/.pier1 p2p id \n\n#控制台输出\nQmNpQvh8Lm7gwt3sDqwJ1pgNn6taJLqdgtRVyZWhsD5bND\n```\n\n\n\n### pier rule\n\n`pier rule`命令用于中继模式下pier向中继链部署应用链验证规则。\n\n**用法**\n\n```\nNAME:\n   Pier rule - Command about rule\n\nUSAGE:\n   Pier rule command [command options] [arguments...]\n\nCOMMANDS:\n   deploy  Deploy validation rule\n```\n\n**具体描述**\n\n`pier rule`具体描述与使用示例参考[直连模式管理](http://localhost:8000/bitxhub/function/direct_manager/)的部署验证规则模块。\n\n\n\n### pier start\n\n`pier start`命令用于启动pier。\n\n**用法**\n\n```\nNAME:\n   pier start - Start a long-running daemon process\n\nUSAGE:\n   pier start [arguments...]\n```\n\n**具体描述**\n\n**样例**：\n\n```shell\n$ pier --repo $HOME/.pier1 start\n\n# 控制台输出\nPier version: dev-release-1.6-1b5b79f\nApp build date: 2021-12-01T17:50:14\nSystem version: darwin/amd64\nGolang version: go1.15.13\n\nINFO[17:07:29.150] Establish connection with bitxhub localhost:60013 successfully  module=app\n2021-12-02T17:07:29.171+0800 [DEBUG] plugin: starting plugin: path=/bin/sh args=\"[sh -c /Users/liruoxin/testRelay/release1.6/eth1/plugins/eth-client]\"\n2021-12-02T17:07:29.178+0800 [DEBUG] plugin: plugin started: path=/bin/sh pid=74023\n2021-12-02T17:07:29.178+0800 [DEBUG] plugin: waiting for RPC address: path=/bin/sh\n2021-12-02T17:07:29.283+0800 [DEBUG] plugin.sh: 2021-12-02T17:07:29.283+0800 [DEBUG] client: plugin address: network=unix address=/var/folders/xr/pnhf9j6n2k5_fysm6s0xkgt00000gn/T/plugin718241634\n2021-12-02T17:07:29.283+0800 [DEBUG] plugin: using plugin: version=4\n2021-12-02T17:07:29.284+0800 [TRACE] plugin.stdio: waiting for stdio data\n2021-12-02T17:07:29.287+0800 [DEBUG] plugin.sh: 2021-12-02T17:07:29.287+0800 [INFO ] client: Basic appchain info: broker address=0xFb23Af09e3E8D83fd5575De9558920Bf351F05E8 ethereum node ip=ws://127.0.0.1:8546\n2021-12-02T17:07:29.416+0800 [DEBUG] plugin.sh: 2021-12-02T17:07:29.416+0800 [INFO ] client: ContractABI: addr=0x5bfe03dbd09817d4957693f672cc31a133bb6084 name=transfer.abi\nClient Type: ethereum\nPprof on localhost:44555\n…………\n```\n\n### pier version\n\n`pier version`命令用于查询版本号。\n\n**用法**\n\n```\nNAME:\n   pier version - Show version about ap\n\nUSAGE:\n   pier version [arguments...]\n```\n\n**具体描述**\n\n**样例**：\n\n```shell\n$ pier --repo $HOME/.pier1 version\n\nPier version: dev-release-1.6-1b5b79f\nApp build date: 2021-12-01T17:50:14\nSystem version: darwin/amd64\nGolang version: go1.15.13\n```\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/bitxhub/dev/cmd/pier_cmd.md b/docs/bitxhub/dev/cmd/pier_cmd.md
--- a/docs/bitxhub/dev/cmd/pier_cmd.md	(revision 6a3d4608a19ce1cc5f97f32711c0c9435c0e71a0)
+++ b/docs/bitxhub/dev/cmd/pier_cmd.md	(date 1641354524179)
@@ -16,20 +16,17 @@
    appchain    Command about appchain in bitxhub
    client      Command about appchain in pier
    id          Get appchain id
-   init        Initialize pier local configuration
+   init        Initialize pier core local configuration
+   config      Initialize pier plugins configuration
    interchain  Query interchain info
    p2p         Command about p2p
    rule        Command about rule
    start       Start a long-running daemon process
    version     Show version about ap
+   proposals   proposals manage command
+   show        Show pier key from repo
    help, h     Shows a list of commands or help for one command
 
-GLOBAL OPTIONS:
-   --repo value   Pier repository path
-   --tls          enable tls between pier and bitxhub or not
-   --help, -h     show help
-   --version, -v  print the version
-
 ```
 
 **参数解释**
@@ -61,9 +58,10 @@
    Pier appchain command [command options] [arguments...]
 
 COMMANDS:
-   register  Register appchain in bitxhub
+   method    Command about appchain method
+   did       Command about appchain did
+   register  Register pier to bitxhub
    update    update appchain in bitxhub
-   freeze    freeze appchain in bitxhub
    activate  activate appchain in bitxhub
    logout    logout appchain in bitxhub
    get       Get appchain info
@@ -140,27 +138,139 @@
 
 **用法**
 
+```shell
+NAME:
+   Pier init - Initialize pier core local configuration
+
+USAGE:
+   Pier init command [command options] [arguments...]
+
+COMMANDS:
+   relay   Initialize pier relay mode configuration
+   direct  Initialize pier direct mode configuration
+   union   Initialize pier union mode configuration
+
+OPTIONS:
+   --http-port value    Specify http port (default: 44544)
+   --pprof-port value   Specify pprof port (default: 44555)
+   --enable-tls         Enable TLS or not
+   --tlsca value        Specify TLS CA certificate path (default: "certs/ca.pem")
+   --common-name value  Specify common name to verify (default: "localhost")
+   --ha value           Specify if pier will run in single mode or high availability mode (default: "single")
+   --help, -h           show help
 ```
+
+**具体描述**
+
+**参数解释**
+
+- `--http-port`：可选参数，指定监听的http端口号，默认为44544。
+- `--pprof-port`：可选参数，指定pprof的端口号，默认为44555.
+- `--enable-tls`：可选参数，是否进行TLS加密传输，默认为false。
+- `--tlsca` ：可选参数，TLS CA路径，默认为certs/ca.pem。
+- `--common-name` ：可选参数，指定ca证书的域名。默认为localhost。
+- `--ha`：可选参数，选择网关是否高可用，高可用功能为商业版本，默认只有单个网关。
+
+
+
+#### pier init delay 
+
+中继模式网关初始化，命令参数如下：
+
+```shell
+NAME:
+   Pier init relay - Initialize pier relay mode configuration
+
+USAGE:
+   Pier init relay [command options] [arguments...]
+
+OPTIONS:
+   --addrs value       Specify bitxhub nodes' address (default: "localhost:60011", "localhost:60012", "localhost:60013", "localhost:60014")
+   --quorum value      Specify the quorum number of BitXHub (default: 2)
+   --validators value  Specify validators of bitxhub (default: "0x000f1a7a08ccc48e5d30f80850cf1cf283aa3abd", "0xe93b92f1da08f925bdee44e91e7768380ae83307", "0xb18c8575e3284e79b92100025a31378feb8100d6", "0x856E2B9A5FA82FD1B031D1FF6863864DBAC7995D")
+```
+
+**具体描述**
+
+**参数解释**
+
+- `--addrs`：可选参数，指定bixhub各节点地址及端口号。
+- `--quorum`：可选参数，指定bixhub集群的quorum个数，与具体共识算法与节点规模相关。
+- `--validators`：可选参数，指定bitxhub管理员节点地址。
+
+
+
+#### pier init direct 
+
+直连模式网关初始化，命令参数如下：
+
+```shell
 NAME:
-   pier init - Initialize pier local configuration
+   Pier init direct - Initialize pier direct mode configuration
 
 USAGE:
-   pier init [arguments...]
+   Pier init direct [command options] [arguments...]
+
+OPTIONS:
+   --peers value  Specify counter party peers to connect
 ```
 
 **具体描述**
 
+**参数解释**
+
+- `--peers`：必选参数，指定直连模式下pier的网络信息（包含自己）。
+
 **样例：**
 
+其中地址为pier启动时所在地址，端口号可任意指定可用端口，
+
 ```shell
 # 初始化pier1相关配置，配置文件目录为$HOME/.pier1
-$ pier --repo $HOME/.pier1 init
-├── api		//直连模式下的api信息
-├── certs
-│   └── ca.pem
-├── key.json
-├── node.priv
-└── pier.toml
+
+$ PID1=$(pier --repo .pier1 p2p id)
+$ PID2=$(pier --repo .pier1 p2p id)
+
+$ pier --repo .pier1 init direct --peers /ip4/127.0.0.1/tcp/3001/p2p/$PID1 --peers /ip4/127.0.0.1/tcp/3002/p2p/$PID2
+```
+
+
+
+#### Pier init union
+
+大规模模式下的初始化配置，命令如下：
+
+```shell
+NAME:
+   Pier init union - Initialize pier union mode configuration
+
+USAGE:
+   Pier init union [command options] [arguments...]
+
+OPTIONS:
+   --addrs value       Specify bitxhub nodes' address (default: "localhost:60011", "localhost:60012", "localhost:60013", "localhost:60014")
+   --connectors value  Specify the remote union peers to connect
+```
+
+**具体描述**
+
+**参数解释**
+
+- `--addrs`：可选参数，指定bixhub各节点地址及端口号。
+
+- `--connectors`：必选参数，指定大规模模式下pier的网络信息（包含自己）。
+
+**样例：**
+
+其中地址为pier启动时所在地址，端口号可任意指定可用端口，
+
+```shell
+# 初始化pier1相关配置，配置文件目录为$HOME/.pier1
+
+$ PID1=$(pier --repo .pier1 p2p id)
+$ PID2=$(pier --repo .pier1 p2p id)
+
+$ pier --repo .pier1 init union --peers /ip4/127.0.0.1/tcp/3001/p2p/$PID1 --peers /ip4/127.0.0.1/tcp/3002/p2p/$PID2
 ```
 
 
@@ -261,6 +371,11 @@
 
 COMMANDS:
    deploy  Deploy validation rule
+   update  update master rule
+   logout  logout validation rule
+
+OPTIONS:
+   --help, -h  show help
 ```
 
 **具体描述**
@@ -331,7 +446,7 @@
 ```shell
 $ pier --repo $HOME/.pier1 version
 
-Pier version: dev-release-1.6-1b5b79f
+Pier version: dev-release-1.11-e1e7c14
 App build date: 2021-12-01T17:50:14
 System version: darwin/amd64
 Golang version: go1.15.13
Index: docs/bitxhub/function/direct_manager.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>直连模式下，网关pier支持对应用链的管理，包括注册、更新、审计应用链等功能。\n\n注意：在进行应用链管理之前，请确保直连模式下跨链网关正常启动！！直连模式网关启动教程请参考[跨链网关直连模式部署](https://meshplus.github.io/bitxhub/bitxhub/usage/direct_mode_pier/pier_direct_mode_deploy/)\n\n## 1. 应用链注册\n\n### pier client register\n\n对于直连模式下需要加入跨链网络应用链，需要首先由应用链管理员向需要跨链的目的链网关pier注册应用链，命令如下：\n\n```shell\nNAME:\n   Pier client register - Register appchain in pier\n\nUSAGE:\n   Pier client register [command options] [arguments...]\n\nOPTIONS:\n   --pier_id value        Specify target pier id\n   --name value           Specify appchain name\n   --type value           Specify appchain type\n   --desc value           Specify appchain description\n   --version value        Specify appchain version\n   --validators value     Specify appchain validators path\n   --consensusType value  Specify appchain consensus type\n```\n\n参数解释：\n\n- `--repo`：可选参数，指定pier配置文件所在目录，如果不指定，默认使用$HOME/.pier目录。\n\n- `--pier_id`：必选参数，指定要连接的目的网关地址，网关地址可通过`pier [--repo <coonect pier's repository>] id`获得。\n\n* `--name`：必选参数，指定应用链名称。\n* `--type`：必选参数，指定应用链类型，如hyperchain、fabric等。\n* `--validators`：必选参数，指定应用链的验证人信息所在的文件路径。\n* `--desc`：必选参数，对应用链的描述信息。\n* `--consensusType`：必选参数，指定p应用链的共识类型，如pbft、raft等。\n* `--version`：必选参数，指定应用链版本信息。\n\n### 示例说明\n\n比如pier1与pier2进行ethereum应用链的注册，命令执行如下：\n\n```shell\n# 参数说明\npier [--repo <repository>] client register --pier_id <connect Appchain addr> --name <srcAppchain name> --type <appchain type> --validators <path of appchain validators file> --desc <description> --consensusType <appchain consensus type> --version <appchain version>\n\n# 具体样例\nexport idA=$(pier --repo $HOME/.pier1 id)\nexport idB=$(pier --repo $HOME/.pier2 id)\n# pier1在pier2上注册\n$ pier --repo $HOME/.pier2 client register --pier_id ${idA} --name eth1 --type ethereum --validators $HOME/.pier1/ethereum/ether.validators --desc \"test register direct eth1\" --consensusType Pos --version 1.0.0\n# 控制台输出\nappchain register successfully, appchain is 0xfF8199Fae48C808b45667DA0CcaAEe839B1a10Cb\n\n# pier2在pier1上注册\n$ pier --repo $HOME/.pier2 client register --pier_id ${idA} --name eth2 --type ethereum --validators $HOME/.pier2/ethereum/ether.validators --desc \"test register direct eth2\" --consensusType Pos --version 1.0.0\n# 控制台输出\nappchain register successfully, appchain is 0x23Fb0E7eF676467563d37D820F1b1Fddb0f9a2E1\n```\n\n可以看到应用链在双方网关注册成功。\n\n\n\n## 2. 获取应用链信息\n\n### pier client get\n\n获取指定的应用链在本地pier的注册信息，命令如下：\n\n```shell\n$ pier [--repo <repository>] client get --pier_id <connect Appchain addr> \n```\n\n- `--pier_id`：必选参数，注册在本地的应用链地址。\n\n### 示例说明\n\n比如在pier1往pier2成功注册后，在pier1执行如下命令：\n\n```shell\n$ pier --repo $HOME/.pier2 client get --pier_id 0xfF8199Fae48C808b45667DA0CcaAEe839B1a10Cb\n# 控制台输出\n{\"id\":\"0xfF8199Fae48C808b45667DA0CcaAEe839B1a10Cb\",\"name\":\"eth1\",\"validators\":\"0x000f1a7a08ccc48e5d30f80850cf1cf283aa3abd,0xe93b92f1da08f925bdee44e91e7768380ae83307,0xb18c8575e3284e79b92100025a31378feb8100d6,0x856E2B9A5FA82FD1B031D1FF6863864DBAC7995D\",\"consensus_type\":\"Pos\",\"status\":\"available\",\"chain_type\":\"ethereum\",\"desc\":\"test register direct eth1\",\"version\":\"1.0.1\",\"public_key\":\"…………\",\"fsm\":null}\n```\n\n说明pier1所绑定的eth1在pier2注册成功。\n\n## 3. 部署验证规则\n\n### pier client rule\n\n在注册完应用链后，还需要在网关部署验证规则，命令如下：\n\n```shell\npier [--repo <repository>] client rule --pier_id <connect Appchain addr> --path <rule_file>\n```\n\n参数解释：\n\n- `--repo`：可选参数，指定pier配置文件所在目录，如果不指定，默认使用$HOME/.pier目录。\n\n- `--pier_id`：必选参数，指定要连接的目的网关地址，网关地址可通过`pier [--repo <coonect pier's repository>] id`获得。\n\n* `--path`：必选参数，指定应用链的验证规则所在文件，一般为应用链插件配置文件下的`xxx.wasm`等。\n\n### 示例说明\n\n比如pier1与pier2进行ethereum应用链的注册，命令执行如下：\n\n```shell\n# pier1往pier2部署验证规则\n$ pier --repo $HOME/.pier1 client rule --pier_id ${idB} --path $HOME/.pier1/ethereum/validating.wasm\n# pier2往pier1部署验证规则\n$ pier --repo $HOME/.pier2 client rule --pier_id ${idA} --path $HOME/.pier2/ethereum/validating.wasm\n```\n\n\n\n## 4. 更新应用链\n\n### pier client update\n\n如果应用链发生了更改，比如验证人信息发生了变化，需要更新其在对面应用链的网关信息。参数说明如下：\n\n```shell\nNAME:\n   Pier client update - Update appchain in pier\n\nUSAGE:\n   Pier client update [command options] [arguments...]\n\nOPTIONS:\n   --pier_id value        Specify target pier id\n   --name value           Specify appchain name\n   --type value           Specify appchain type\n   --desc value           Specify appchain description\n   --version value        Specify appchain version\n   --validators value     Specify appchain validators path\n   --consensusType value  Specify appchain consensus type\n```\n\n该命令参数含义与应用链注册命令的参数一致，不再赘述。\n\n### 示例说明\n\n比如进行ethereum应用链的共识算法类型发生变化，需要更新应用链，命令执行如下：\n\n```shell\n# 参数说明\n$ pier [--repo <repository>] client update --pier_id <connect Appchain addr> --name <srcAppchain name> --type <appchain type> --validators <path of appchain validators file> --desc <description> --consensusType <appchain consensus type> --version <appchain version>\n\n# 具体样例 \n$ pier --repo $HOME/.pier2 client update --pier_id ${idA} --name eth2 --type ethereum --validators eth2/ethereum/ether.validators --desc \"test register direct eth2\" --consensusType Pow --version 1.0.2 \n\n# 控制台输出\nappchain update successfully, appchain is <nil>\n```\n\n对面pier收到后进行更新应用链信息。\n\n\n\n## 5. 审计应用链\n\n### pier client audit\n\n**注意**：1.6.x版本此项非必须项，可不对其设置。\n\n跨链网关对注册应用链信息进行审计，修改事务状态，参数说明如下：\n\n```shell\nUSAGE:\n   Pier client audit [command options] [arguments...]\n\nOPTIONS:\n   --id value          Specific appchain id\n   --isApproved value  Specific approved signal\n   --desc value        Specific audit description\n```\n\n参数解释：\n\n- `--id`：必选参数，指定要连接的目的网关地址，网关地址可通过`pier [--repo <coonect pier's repository>] id`获得。\n- `isApproved`：必选参数，是否通过注册。1为通过，0为不通过。\n- `--desc`：必选参数，对应用链的描述信息。\n\n### 示例说明\n\n命令执行如下：\n\n```shell\n# 参数说明\n$ pier [--repo <repository>] client audit --id <connect Appchain addr> ----isApproved <0 or 1> --desc <description>\n\n# 具体样例\n$ pier --repo $HOME/.pier1 client audit --id ${idB} --isApproved 1 --desc \"test register direct eth2\" \n# 控制台输出\naudit appchain 0x23Fb0E7eF676467563d37D820F1b1Fddb0f9a2E1 successfully\n```\n\npier1对pier2绑定的应用链注册提案审计通过。
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/bitxhub/function/direct_manager.md b/docs/bitxhub/function/direct_manager.md
--- a/docs/bitxhub/function/direct_manager.md	(revision 6a3d4608a19ce1cc5f97f32711c0c9435c0e71a0)
+++ b/docs/bitxhub/function/direct_manager.md	(date 1641354917770)
@@ -47,8 +47,10 @@
 pier [--repo <repository>] client register --pier_id <connect Appchain addr> --name <srcAppchain name> --type <appchain type> --validators <path of appchain validators file> --desc <description> --consensusType <appchain consensus type> --version <appchain version>
 
 # 具体样例
-export idA=$(pier --repo $HOME/.pier1 id)
-export idB=$(pier --repo $HOME/.pier2 id)
+
+$ idA=$(pier --repo $HOME/.pier1 id)
+$ idB=$(pier --repo $HOME/.pier2 id)
+
 # pier1在pier2上注册
 $ pier --repo $HOME/.pier2 client register --pier_id ${idA} --name eth1 --type ethereum --validators $HOME/.pier1/ethereum/ether.validators --desc "test register direct eth1" --consensusType Pos --version 1.0.0
 # 控制台输出
@@ -90,21 +92,31 @@
 
 ## 3. 部署验证规则
 
-### pier client rule
+### pier client rule deploy
 
 在注册完应用链后，还需要在网关部署验证规则，命令如下：
 
 ```shell
-pier [--repo <repository>] client rule --pier_id <connect Appchain addr> --path <rule_file>
+NAME:
+   Pier rule deploy - Deploy validation rule
+
+USAGE:
+   Pier rule deploy [command options] [arguments...]
+
+OPTIONS:
+   --path value       Specific rule path
+   --method value     Specific did sub method name(like appchain)
+   --admin-key value  Specific admin key path
+   --rule-url value   Specific appchain rule url
 ```
 
-参数解释：
+**参数解释：**
 
 - `--repo`：可选参数，指定pier配置文件所在目录，如果不指定，默认使用$HOME/.pier目录。
-
-- `--pier_id`：必选参数，指定要连接的目的网关地址，网关地址可通过`pier [--repo <coonect pier's repository>] id`获得。
-
-* `--path`：必选参数，指定应用链的验证规则所在文件，一般为应用链插件配置文件下的`xxx.wasm`等。
+- `--path`：必选参数，指定应用链的验证规则所在文件，一般为应用链插件配置文件下的`xxx.wasm`等。
+- `--method`：必选参数，指定did名称。
+- `--admin-key`：必选参数，指定admin的私钥地址。
+- `--pier_id`：必选参数，指定验证规则的url。
 
 ### 示例说明
 
